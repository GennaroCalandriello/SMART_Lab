/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
     inlet
    {
        type            codedFixedValue;
        name            inletGaussianU;   // mandatory unique name
        value           uniform (0 0 0); // dummy, overridden by code

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        code
        #{
            // Face centres on this inlet patch
            const vectorField& Cf = patch().Cf();

            // Gaussian parameters
            const scalar x0     = 3;   // centre in x [m]
            const scalar z0     = 0.0;   // centre in z [m]
            const scalar sigma  = 3;   // width [m]
            const scalar Umax   = 3.0;   // peak velocity [m/s]
            const scalar x1 = 2.0;
            const scalar z1 = 6.0;
            const scalar sigma1 = 1.0;


            // Loop over each face, compute radius and assign U vector
        forAll(Cf, faceI)
            {
            scalar x = Cf[faceI].x();
            scalar z = Cf[faceI].z();

            scalar dx = (x - x0) / sigma;
            scalar dz = (z - z0) / sigma;
            scalar mag = exp(-(dx * dx + dz * dz));

            scalar dx1 = (x - x1) / sigma;
            scalar dz1 = (z - z1) / sigma;
            scalar mag1 = exp(-(dx1 * dx1 + dz1 * dz1));

    // sommo le due Gaussiane e moltiplico per il picco
            //mag1 ok, Ã¨ al centro del patch
            // scalar speed = Umax * (mag1);
            scalar speed = Umax * (mag+mag1);

            // assegno in una volta
    (*this)[faceI] = vector(speed, 0.0, 0.0);
        }

            
        #};
    }

    outlet
    {
        type            zeroGradient;
    }

    upperWall
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    lowerWall
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    front
    {
        type            symmetryPlane;
    }
    back
    {
        type            symmetryPlane;
    }
}


// ************************************************************************* //
